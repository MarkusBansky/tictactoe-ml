!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=5)}({5:function(t,e,n){"use strict";n.r(e);var r=function(){function t(t,e,n,r){var o=this;this.btn=e,this.grid=t,$(this.btn).click(function(){return o.occupyBy(n)})}return t.prototype.occupyBy=function(t){this.occupiedBy=t,$(this.btn).addClass("occupiedBy"+this.occupiedBy.character),$(this.btn).prop("disabled",!0),$(this.btn).text(t.character),this.grid.gatherState(),console.log("Player: "+t.name+" has pressed button: "+this.btn.id+".")},t.prototype.getState=function(){switch($(this.btn).text()){case"X":return 1;case"O":return 2;default:return 0}},t}(),o=function(){return function(t,e){this.name=t,this.character=e}}(),u=function(){return function(t){var e=this;this.value=[],t.buttons.forEach(function(t){e.value.push(t.getState())})}}(),i=new(function(){function t(){this.buttons=[],this.states=[]}return t.prototype.add=function(t){this.buttons.push(t)},t.prototype.gatherState=function(){this.states.push(new u(this))},t}()),c=new o("HUMAN","X"),s=new o("AI","O");$(".game button").each(function(){var t=new r(i,this,c,s);i.add(t)}),$("#startOver").click(function(){console.log(i)})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,